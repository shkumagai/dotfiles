#!/bin/bash

# Copyright (c) 2012 Shoji KUMAGAI <kumagai@accense.com>
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# author: Shoji KUMAGAI <kumagai@accense.com>
# first edition: Wed Jan 18 11:19:49 JST 2012
# last modified: Wed Jan 18 20:18:21 JST 2012
# version: $Revision: $


# default configuration
#---------------------------------------

# OS case
#
tput_cll=$(tput ce 2> /dev/null)
tput_cls=$(tput cd 2> /dev/null)

# escape sequence
#
readonly red=31
readonly yellow=33
readonly blue=34
readonly org=0
readonly es_cl=$(tput clear) # clear screen and home cursor
readonly es_ho=$(tput home)  # home cursor
readonly es_el=${tput_cll:-$(tput el)} # clear to end of line
readonly es_cd=${tput_cls:-$(tput ed)} # clear to end of screen

# global variables
#
readonly version='0.1.0a'
readonly testhome="$HOME/tmp"
readonly githubhome="$HOME/work/github/accense"

usage_msg='usage:
    testenv command [package] | option

    option:
      -h                 print help message
      -v                 print version

    command:
      create             Create new test environment.
      prepare <package>  Prepare test environment for specified package.
      update <package>   Update target package using latest codes and tests.
      truncate           Sweep old logs and datas excluding package archives.
      drop               Remove all test environments.

    package:
      standard           fullflex SG Standard
      m2m                fullflex SG M2M
      for-isp            fullflex SG for ISP
      proxy              fullflex SG Proxy'

caution_msg="
If you will not want to remove \$testhome due to some reason,
you can stop this process by entering 'n'.
Really want to remove \$testhome ?
> "


# functions
#---------------------------------------

# show usage message
usage()
{
  echo "$usage_msg" 1>&2
}

# show version
version()
{
  echo "version: ${1}"
}

# echo specific colored message
colored_echo()
{
  echo -e "\033[0;${2}m${1}\033[0;${org}m"
}

# convert package name
convert_pkg_name()
{
  id=$(echo $1 | tr '[:lower:]' '[:upper:]' | tr '-' '_')
  echo "SG_${id}"
}

# pull all repositories
pull_all_repos()
{
  cd $githubhome
  $githubhome/pullall
}

# delete and create symbolic link to specified archive
update_symlink()
{
  new_archive=$(find "$PWD/_build" -type f -name "*${pkg_name}*")
  arch_name=${new_archive##?*/}
  colored_echo $arch_name $yellow

  symlink=$(find $testhome -type l -name "$arch_name")
  if [ "$symlink" != "" ]; then
    test -h $symlink && rm $symlink
  else
    symlink="${testhome}/${arch_name}"
  fi

  ln -s $new_archive $symlink
  ls -l $symlink
}

# build target package archive, and then make symlink to new archive.
deploy_pkg_archive()
{
  cd $githubhome/fullflex-sg
  PKG=$(convert_pkg_name $pkg_name)
  export PKG
  make

  update_symlink
}

# build related cui package archive, and then make symlink to new archive.
deploy_pkg_cui_archive()
{
  cd $githubhome/fullflex-cui  
  PKG=$(convert_pkg_name $pkg_name)
  export PKG
  make

  update_symlink
}

# prepare test environment
prepare()
{
  # update resources
  pull_all_repos

  # build and deploy target package archives
  deploy_pkg_archive $pkg_name 

  # build and deploy related cui package archives
  deploy_pkg_cui_archive $pkg_name

  # run setup script for target
  cd $githubhome/fullflex-test/test/$(convert_pkg_name $pkg_name)
  python setup.py
}

# update test environment
update()
{
  truncate
  prepare
}

# create test environment
create()
{
  cd $HOME

  # make $testhome and its sub-directories
  if [ -d $testhome ]; then
    colored_echo "!!! CAUTION !!!" $red
    echo -n "$caution_msg"
    read agree
    if [ "y" != "$agree" ]; then
      echo "Aborted."
      exit 0
    fi
    rm -rf $testhome
  fi
  mkdir -p $testhome/{ensure,pylib}

  # make symlink to pylib momonga
  ln -s "$githubhome/momonga/momonga" "$testhome/pylib/momonga"
}

# truncate test environment
truncate()
{
  # remove old logs and datas
  cd $testhome
  rm -rf {ff?,fullflex-cui,testdata}
  rm -rf ensure && mkdir ensure
}

# drop test environment
# - remove $testhome
#
drop()
{
  rm -rf $testhome
}

# main
#---------------------------------------

# check the option
while getopts hv option
do
  case "$option" in
  h|\?)
    usage
    exit 0
    ;;
  v)
    version $version
    exit 0
    ;;
  esac
done
shift $(($OPTIND - 1))

[ 0 = $# ] && { usage; exit 1; }

cmd_name=$1
pkg_name=$2

echo -e $es_cl
colored_echo "Execute: $cmd_name" $blue
$cmd_name

# END